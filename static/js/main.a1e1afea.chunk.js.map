{"version":3,"sources":["index.js"],"names":["Square","props","className","style","background","winner","onClick","value","calculateWinner","squares","lines","i","length","a","b","c","Board","isWinner","this","board","row","j","push","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","lastMove","checked","handleChange","bind","setState","slice","concat","step","current","checkDraw","console","log","includes","moves","map","move","pos","Math","floor","at","moveString","desc","jumpTo","status","handleClick","uncheckedIcon","checkedIcon","onChange","reverse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1e1afea.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Switch from \"react-switch\";\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" style={{ background: props.winner ? \"yellow\" : \"white\" }} onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return { a, b, c };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction checkIfThereIsEmpty(squares) {\r\n    console.log(squares.includes(null));\r\n    return squares.includes(null);\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i, isWinner) {\r\n        return <Square key={i} value={this.props.squares[i]} winner={isWinner} onClick={() => this.props.onClick(i)} />;\r\n    }\r\n\r\n    render() {\r\n        let board = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            let row = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                if (this.props.winner && (i * 3 + j === this.props.winner.a || i * 3 + j === this.props.winner.b || i * 3 + j === this.props.winner.c)) {\r\n                    row.push(this.renderSquare(i * 3 + j, true));\r\n                }\r\n                else {\r\n                    row.push(this.renderSquare(i * 3 + j, false));\r\n                }\r\n            }\r\n            board.push(<div className=\"board-row\" key={i}>{row}</div>)\r\n        }\r\n        return (<div>{board}</div>);\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                winner: null\r\n            }],\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            lastMove: [],\r\n            checked: false,\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(checked) {\r\n        this.setState({ checked });\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[this.state.stepNumber];\r\n        const squares = current.squares.slice();\r\n        const winner = calculateWinner(squares);\r\n        if (winner || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({ history: history.concat([{ squares: squares, winner: winner }]), xIsNext: !this.state.xIsNext, stepNumber: history.length, lastMove: this.state.lastMove.concat([i]) });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n            lastMove: this.state.lastMove.slice(0, step),\r\n            history: this.state.history.slice(0, step + 1)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber]\r\n        const winner = calculateWinner(current.squares);\r\n        const checkDraw = checkIfThereIsEmpty(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            let pos = \"\";\r\n            if (move) {\r\n                pos = ' (' + Math.floor(this.state.lastMove.at(move - 1) / 3) + ', ' + this.state.lastMove.at(move - 1) % 3 + ')';\r\n            }\r\n            const moveString = move ? \"Go to move #\" + move + pos : 'Go to game start'\r\n            const desc = this.state.stepNumber === move ? <strong>{moveString}</strong> : moveString;\r\n\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        })\r\n\r\n        let status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        if (winner) {\r\n            status = \"Winner: \" + current.squares[winner.a];\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board squares={current.squares} winner={winner}\r\n                        onClick={(i) => this.handleClick(i)} />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <Switch uncheckedIcon={false} checkedIcon={false} onChange={this.handleChange} checked={this.state.checked} />\r\n                    <ol>{this.state.checked ? moves.reverse() : moves}</ol>\r\n                    <div>\r\n                        {!checkDraw ? \"GAME DRAW\" : \"\"}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}